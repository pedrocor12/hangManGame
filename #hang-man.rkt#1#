#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1047 0 17 3 27 #";; hang-man for REPL Scheme"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"source-name"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"glossary.txt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";; Side effect:"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";; Strig-> IO([String])"
0 0 25 29 1 #"\n"
0 0 17 3 52 #";; Passed the path, open the file containig glossary"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"read-words-from"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (("
0 0 14 3 4 #"port"
0 0 25 3 2 #" ("
0 0 14 3 15 #"open-input-file"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 3 #"res"
0 0 25 3 2 #" ("
0 0 14 3 14 #"read-word-list"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"close-input-port"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 3 #"res"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";; Side effect"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; Fd -> [String] -> IO ([String])"
0 0 25 29 1 #"\n"
0 0 17 3 66
#";; Passed port and acumulator, return the all the words as strings"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"read-word-list"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 1 #" "
0 0 14 3 3 #"acc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"stuff"
0 0 25 3 2 #" ("
0 0 14 3 4 #"read"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 11 #"eof-object?"
0 0 25 3 1 #" "
0 0 14 3 5 #"stuff"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 3 #"acc"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 14 #"read-word-list"
0 0 25 3 1 #" "
0 0 14 3 4 #"port"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 25 3 1 #" "
0 0 14 3 5 #"stuff"
0 0 25 3 2 #") "
0 0 14 3 3 #"acc"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"list-of-words"
0 0 25 3 2 #" ("
0 0 14 3 15 #"read-words-from"
0 0 25 3 1 #" "
0 0 14 3 11 #"source-name"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; STATE OF THE GAME"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 4 #"defi"
0 0 15 3 2 #"ne"
0 0 25 3 1 #" "
0 0 14 3 8 #"glossary"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 12 #"string->list"
0 0 25 3 1 #" "
0 0 14 3 13 #"list-of-words"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"word-to-guess"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 8 #"glossary"
0 0 25 3 1 #"("
0 0 14 3 6 #"random"
0 0 25 3 1 #"("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 8 #"glossary"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"partial-sol"
0 0 25 3 1 #" "
0 0 14 3 13 #"word-to-guess"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"hits"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"plays"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"failures"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"total-failures"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"total-hits"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 13 #"word-to-guess"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; IO(String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"game-status"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"format"
0 0 25 3 1 #" "
0 0 19 3 26 #"\"~a H:~a/~a F:~a/~a ~a ~a\""
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 11 #"partial-sol"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 4 #"hits"
0 0 25 3 2 #"  "
0 0 14 3 10 #"total-hits"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 8 #"failures"
0 0 25 3 2 #"  "
0 0 14 3 14 #"total-failures"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 5 #"plays"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 4 #"hits"
0 0 25 3 1 #" "
0 0 14 3 10 #"total-hits"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 8 #"failures"
0 0 25 3 1 #" "
0 0 14 3 14 #"total-failures"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 19 3 2 #"\"\""
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"GAME-OVER(\""
0 0 25 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 25 3 1 #" "
0 0 14 3 13 #"word-to-guess"
0 0 25 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;  PURELY FUNCTIONAL"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"occurrences"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 14 3 4 #"char"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 25 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 4 #"char"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 11 #"occurrences"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 4 #"char"
0 0 25 3 1 #")"
0 0 22 3 1 #"1"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"o"
0 0 14 3 10 #"ccurrences"
0 0 25 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 4 #"char"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"     ]))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";;to test (occurrences '(#\\b #\\b #\\a) #\\b)"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; (occurrences '(#\\a #\\b #\\b) #\\b)"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";;This is where occurences finishes"
0 0 25 29 1 #"\n"
0 0 17 3 5 #";;(in"
0 0 17 3 1 #"d"
0 0 17 3 24 #"ices '(#\\a #\\b #\\b) #\\b)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"indices"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 14 3 4 #"char"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"original-list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #") ("
0 0 14 3 7 #"reverse"
0 0 25 3 1 #" "
0 0 14 3 13 #"original-list"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 14 3 4 #"char"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 1 #" "
0 0 14 3 13 #"original-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 14 3 13 #"original-list"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 25 3 6 #"))])))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 5 #"trace"
0 0 25 3 1 #" "
0 0 14 3 7 #"indices"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;test indices (indices '() #\\b)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 9 #";; test ("
0 0 17 3 43 #"replace-indices '(#\\a #\\* #\\*) '( 1 2) #\\b)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 15 #"replace-indices"
0 0 17 3 1 #" "
0 0 17 3 4 #"word"
0 0 17 3 1 #" "
0 0 17 3 3 #"idx"
0 0 17 3 1 #" "
0 0 17 3 3 #"new"
0 0 17 3 1 #")"
0 0 17 3 5 #"null)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"replace-indices"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 1 #" "
0 0 14 3 7 #"indices"
0 0 25 3 1 #" "
0 0 14 3 3 #"new"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 7 #"indices"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 48 #";; no need to do anything and saves checks below"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 4 #"word"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 2 #"lt"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 10 #")         "
0 0 17 3 17 #";tail of the list"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 3 #"ltt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #")) "
0 0 17 3 17 #";tail of the tail"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 2 #"rp"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #")) "
0 0 17 3 20 #";current replacement"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 2 #"la"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 10 #"())       "
0 0 17 3 34 #";accumulator for the reversed list"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 2 #"it"
0 0 25 3 1 #" "
0 0 14 3 7 #"indices"
0 0 25 3 4 #")   "
0 0 17 3 30 #";tail of the remaining indices"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 2 #"ia"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 10 #"()))      "
0 0 17 3 36 #";accumulator for decremented indices"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 19 #";; finished indices"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 17 3 28 #";; finished list: we're done"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 7 #"reverse"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 2 #"rp"
0 0 25 3 1 #" "
0 0 14 3 2 #"la"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 17 3 51 #";; loop on the rest of the list and the new indices"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 3 #") ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 2 #"rp"
0 0 25 3 1 #" "
0 0 14 3 2 #"la"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 14 3 2 #"ia"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          (("
0 0 14 3 5 #"zero?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 53 #";; Loop with the replacement, dropping the zero index"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 2 #"lt"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 1 #" "
0 0 14 3 3 #"new"
0 0 25 3 1 #" "
0 0 14 3 2 #"la"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 2 #") "
0 0 14 3 2 #"ia"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 37 #";; loop with the existing replacement"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 2 #"lt"
0 0 25 3 1 #" "
0 0 14 3 3 #"ltt"
0 0 25 3 1 #" "
0 0 14 3 2 #"rp"
0 0 25 3 1 #" "
0 0 14 3 2 #"la"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 14 3 2 #"ia"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 5 #"trace"
0 0 25 3 1 #" "
0 0 14 3 15 #"replace-indices"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";;test number of hits \" ("
0 0 17 3 26 #"noOfHits '(#\\a #\\* #\\*)) \""
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"noOfHits"
0 0 25 3 1 #" "
0 0 14 3 6 #"hidden"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 6 #"hidden"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 4 #"'#\\*"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 6 #"hidden"
0 0 25 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 8 #"noOfHits"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 6 #"hidden"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 8 #"noOfHits"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 6 #"hidden"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 5 #"trace"
0 0 25 3 1 #" "
0 0 14 3 8 #"noOfHits"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 25 29 1 #"\n"
0 0 17 3 15 #";; Side effects"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; IO(String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"restart"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 11 #"partial-sol"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-string"
0 0 25 3 1 #" "
0 0 14 3 10 #"total-hits"
0 0 25 3 1 #" "
0 0 22 3 3 #"#\\*"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 4 #"hits"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 4 #"hits"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"plays"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"plays"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 8 #"failures"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 8 #"failures"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 11 #"game-status"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";; Char -> IO(String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"guess"
0 0 25 3 1 #" "
0 0 14 3 4 #"char"
0 0 25 3 3 #") ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; IO(String)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 3 #") ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXTRA -F3"
0 0 25 29 1 #"\n"
0 0 17 3 26 #";;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 1 #"["
0 0 17 3 1 #"("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 4 #"word"
0 0 17 3 2 #") "
0 0 17 3 4 #"char"
0 0 17 3 3 #") ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 11 #"occurrences"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"word"
0 0 17 3 2 #") "
0 0 17 3 4 #"char"
0 0 17 3 1 #")"
0 0 17 3 3 #"1)]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; p: all-words as list of list of char"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"words-containing"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 1 #" "
0 0 14 3 4 #"char"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 2 #") "
0 0 14 3 5 #"empty"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #"("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 2 #"))"
0 0 14 3 4 #"char"
0 0 25 3 2 #") "
0 0 17 3 54 #";;because i am checking for a list inside another list"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #"("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 2 #")("
0 0 14 3 16 #"words-containing"
0 0 25 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 1 #")"
0 0 14 3 4 #"char"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 16 #"words-containing"
0 0 25 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 1 #")"
0 0 14 3 4 #"char"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                   "
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 14 #";;(occurrences"
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 4 #"word"
0 0 17 3 2 #") "
0 0 17 3 5 #"char)"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 5 #";;]))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; p: all-words as list of list of char"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";;  : chars as a list of char"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"words-containing-ext"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-words"
0 0 25 3 1 #" "
0 0 14 3 5 #"chars"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";; IO([String])"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";; this is very hard."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"sieve"
0 0 25 3 1 #" "
0 0 14 3 5 #"chars"
0 0 25 3 3 #") ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
